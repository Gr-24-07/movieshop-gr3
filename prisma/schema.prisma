// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Movie {
    id           Int          @id @default(autoincrement())
    title        String
    overview     String
    release_date Int
    poster_path  String
    genres       MovieGenre[]

    cartItems    CartItem[]
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @default(now())
    price        Int
}

model Genre {
    id     Int          @id @default(autoincrement())
    name   String       @unique
    movies MovieGenre[]
}

model MovieGenre {
    movieId Int
    genreId Int
    movies  Movie @relation(fields: [movieId], references: [id])
    genres  Genre @relation(fields: [genreId], references: [id])

    @@id([movieId, genreId])
}

// ############## USERS  MODEL ##########################

enum Role {
    CUSTOMER
    ADMIN
}

model User {
    id        String     @id @default(cuid())
    name      String?
    email     String     @unique
    image     String?
    password  String?
    role      Role       @default(CUSTOMER)
    cart      Cart?      @relation(fields: [cartId], references: [id])
    cartId    Int?
    cartItems CartItem[]
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
}

// ############## END USERS  MODEL ##########################

// ############## Cart  MODEL ##########################
model Cart {

    id        Int     @id @default(autoincrement())
    userId    String     @unique
    items     CartItem[]
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt

    User User[]
}

model CartItem {
    id        Int    @id @default(autoincrement())
    movieId   Int
    cartId    Int
    quantity  Int
    price     Float
    cart      Cart   @relation(fields: [cartId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    @@unique([movieId, cartId])
    User User[]
    Movie Movie[]
}

// ############## END Cart  MODEL ########################

    id        Int        @id @default(autoincrement())
    userId    Int
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    items     CartItem[]
}

model CartItem {
    id       Int  @id @default(autoincrement())
    cartId   Int
    movieId  Int
    quantity Int  @default(1)
    cart     Cart @relation(fields: [cartId], references: [id])
}

// ############## END Cart  MODEL ########################

model Order {
    id          Int         @id @default(autoincrement())
    userId      String
    totalAmount Int
    status      Status
    orderDate   DateTime    @default(now())
    user        User        @relation(fields: [userId], references: [id])
    OrderItem   OrderItem[]
}

model OrderItem {
    id              Int   @id @default(autoincrement())
    orderId         Int
    movieId         Int
    quantity        Int
    priceAtPurchase Int
    order           Order @relation(fields: [orderId], references: [id])
    movie           Movie @relation(fields: [movieId], references: [id])
}

enum Status {
    PENDING
    CANCELLED
    SHIPPED
    COMPLETED
}

